name: Deploy CloudFront Function
description: Composite action that deploys source code updates to an existing / premade CloudFront Function in AWS.

runs:
  using: composite

  steps:
    - name: Deploy CloudFront Function
      run: |
        # Setup Logger

        YELLOW="\033[33m"
        GREEN="\033[32m"
        RED="\033[31m"
        BLUE="\033[34m"
        RESET="\033[0m"

        logger() {
            case "$1" in
            info)    COLOR=$BLUE; ICON="ℹ️";;
            success) COLOR=$GREEN; ICON="✅";;
            warning) COLOR=$YELLOW; ICON="⚠️";;
            error)   COLOR=$RED; ICON="❌";;
            *)       COLOR=$RESET; ICON="";;
            esac

            shift  # Remove the first argument
            echo -e "${COLOR}${ICON} $@${RESET}"
        }

        # Fetch CloudFront Function ETag

        logger info "Fetching ETag for ${{ inputs.function-name }}..."
        CURRENT_ETAG=$(aws cloudfront describe-function --name "${{ inputs.function-name }}" --query 'ETag' --output text)
        logger success "Successfully fetched ETag: $CURRENT_ETAG"

        # Update CloudFront Function

        logger info "Updating ${{ inputs.function-name }}..."
        NEW_ETAG=$(aws cloudfront update-function \
            --name "${{ inputs.function-name }}" \
            --function-config "{\"Comment\": \"${{ inputs.comment }}\", \"Runtime\": \"$RUNTIME\"}" \
            --function-code fileb://"${{ inputs.source-file }}" \
            --if-match "$CURRENT_ETAG" \
            --query 'ETag' --output text)
        logger success "Successfully updated ${{ inputs.function-name }}. New ETag: $NEW_ETAG"

        # Publish CloudFront Function

        logger info "Publishing ${{ inputs.function-name }} with ETag: $NEW_ETAG..."
        aws cloudfront publish-function --name "${{ inputs.function-name }}" --if-match "$NEW_ETAG"
        logger success "Successfully published ${{ inputs.function-name }}"

        # Wait for CloudFront Function to fully deploy

        if [[ "${{ inputs.wait-for-publish }}" == "true" ]]; then
            logger info "Waiting for ${{ inputs.function-name }} to be published..."
            while true; do
                status=$(aws cloudfront describe-function --name "${{ inputs.function-name }}" --query 'FunctionSummary.Status' --output text)
                echo "Current status: $status"

                if [[ "$status" = "DEPLOYED" ]]; then
                    logger success "${{ inputs.function-name }} is now published and deployed."
                    break
                fi

                echo "⏳ Still deploying... Checking again in 5 seconds..."
                sleep 5
            done
        fi
      shell: bash

branding:
  icon: upload-cloud
  color: blue

inputs:
  function-name:
    description: The name of your CloudFront Function.
    required: true

  comment:
    description: A comment to describe your CloudFront Function.
    required: true

  runtime:
    default: cloudfront-js-2.0
    description: The runtime environment version for your CloudFront Function.
    required: false

  source-file:
    description: The local file path of your source code for the CloudFront Function.
    required: true

  wait-for-publish:
    default: "false"
    description: Whether or not to wait for the CloudFront Function to be fully deployed (takes around 5 minutes). Defaults to false.
    required: false
